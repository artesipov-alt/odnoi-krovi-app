basePath: /api/v1
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.ReferenceItem:
    properties:
      label:
        type: string
      value:
        type: string
    type: object
  handlers.ReferenceItemDB:
    properties:
      label:
        type: string
      value:
        type: integer
    type: object
  handlers.ReferenceResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.ReferenceItem'
        type: array
    type: object
  handlers.ReferenceResponseDB:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.ReferenceItemDB'
        type: array
    type: object
  handlers.SimpleRegistrationRequest:
    properties:
      fullName:
        example: Иван Иванов
        maxLength: 255
        minLength: 1
        type: string
      telegramId:
        example: 123456789
        minimum: 1
        type: integer
    required:
    - telegramId
    type: object
  handlers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.BloodStock:
    properties:
      bloodTypeId:
        example: 1
        type: integer
      clinicId:
        example: 1
        type: integer
      expirationDate:
        example: "2024-12-31"
        type: string
      id:
        example: 1
        type: integer
      petType:
        allOf:
        - $ref: '#/definitions/models.PetType'
        example: dog
      priceRub:
        example: 5000
        type: number
      status:
        allOf:
        - $ref: '#/definitions/models.BloodStockStatus'
        example: active
      volumeMl:
        example: 500
        type: integer
    type: object
  models.BloodStockStatus:
    enum:
    - active
    - reserved
    - used
    - expired
    type: string
    x-enum-varnames:
    - BloodStockStatusActive
    - BloodStockStatusReserved
    - BloodStockStatusUsed
    - BloodStockStatusExpired
  models.DonorRequirements:
    properties:
      bloodTypes:
        items:
          type: string
        type: array
      healthConditions:
        items:
          type: string
        type: array
      maxAge:
        type: integer
      minAge:
        type: integer
      minWeight:
        type: number
      vaccinations:
        items:
          type: string
        type: array
    type: object
  models.Gender:
    enum:
    - male
    - female
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
  models.LivingCondition:
    enum:
    - apartment
    - house
    - aviary
    - other
    type: string
    x-enum-varnames:
    - LivingConditionApartment
    - LivingConditionHouse
    - LivingConditionAviary
    - LivingConditionOther
  models.Pet:
    properties:
      ageMonths:
        example: 6
        type: integer
      ageYears:
        example: 3
        type: integer
      bloodGroup:
        example: DEA 1.1
        type: string
      breed:
        example: Лабрадор
        type: string
      chipNumber:
        example: "123456789"
        type: string
      dewormingDate:
        example: "2023-01-01T12:00:00Z"
        type: string
      ectoparasiteDate:
        example: "2023-01-01T12:00:00Z"
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/models.Gender'
        example: male
      hasChip:
        example: false
        type: boolean
      id:
        example: 1
        type: integer
      isGuideDog:
        example: false
        type: boolean
      isTherapist:
        example: false
        type: boolean
      knowsBloodGroup:
        example: false
        type: boolean
      lastTransfusionDate:
        example: "2023-01-01T12:00:00Z"
        type: string
      latitude:
        example: 55.7558
        type: number
      livingCondition:
        allOf:
        - $ref: '#/definitions/models.LivingCondition'
        example: apartment
      longitude:
        example: 37.6173
        type: number
      name:
        example: Бобик
        type: string
      ownerId:
        example: 1
        type: integer
      photoUrl:
        example: https://example.com/photo.jpg
        type: string
      sterilized:
        example: false
        type: boolean
      type:
        allOf:
        - $ref: '#/definitions/models.PetType'
        example: dog
      vaccinationDate:
        example: "2023-01-01T12:00:00Z"
        type: string
      weightKg:
        example: 25.5
        type: number
    type: object
  models.PetType:
    enum:
    - dog
    - cat
    type: string
    x-enum-varnames:
    - PetTypeDog
    - PetTypeCat
  models.User:
    properties:
      allowGeo:
        example: true
        type: boolean
      consentPd:
        example: true
        type: boolean
      createdAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      fullName:
        example: Иван Иванов
        type: string
      id:
        example: 1
        type: integer
      locationId:
        example: 1
        type: integer
      onBoarding:
        example: false
        type: boolean
      organizationName:
        example: ООО Ромашка
        type: string
      phone:
        example: "+79991234567"
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        example: user
      telegramId:
        example: 123456789
        type: integer
    type: object
  models.UserRole:
    enum:
    - user
    - clinic
    - admin
    - donor
    type: string
    x-enum-varnames:
    - UserRoleUser
    - UserRoleClinic
    - UserRoleAdmin
    - UserRoleDonor
  models.VetClinic:
    properties:
      appointmentRequirementId:
        example: 1
        type: integer
      clinicId:
        example: 1
        type: integer
      contactPersonName:
        example: Мария Петрова
        type: string
      contactPersonPosition:
        example: Администратор
        type: string
      donorBonusPrograms:
        example: Бонусные программы для доноров
        type: string
      donorRequirements:
        $ref: '#/definitions/models.DonorRequirements'
      latitude:
        example: 55.7558
        type: number
      locationId:
        example: 1
        type: integer
      longitude:
        example: 37.6173
        type: number
      name:
        example: ВетКлиника ЗооДоктор
        type: string
      phone:
        example: "+79991234567"
        type: string
      transfusionConditions:
        example: Условия для переливания крови
        type: string
      website:
        example: https://vetclinic.example.com
        type: string
      workHours:
        example: 'Пн-Пт: 9:00-18:00'
        type: string
    type: object
  services.BloodStockCreate:
    properties:
      bloodTypeId:
        minimum: 1
        type: integer
      clinicId:
        minimum: 1
        type: integer
      expirationDate:
        description: 'формат: "2024-12-31"'
        type: string
      petType:
        allOf:
        - $ref: '#/definitions/models.PetType'
        enum:
        - dog
        - cat
      status:
        allOf:
        - $ref: '#/definitions/models.BloodStockStatus'
        enum:
        - active
        - reserved
        - used
        - expired
      volumeMl:
        minimum: 1
        type: integer
    required:
    - bloodTypeId
    - petType
    type: object
  services.BloodStockUpdate:
    properties:
      expirationDate:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.BloodStockStatus'
        enum:
        - active
        - reserved
        - used
        - expired
      volumeMl:
        minimum: 1
        type: integer
    type: object
  services.PetCreate:
    properties:
      ageMonths:
        maximum: 11
        minimum: 0
        type: integer
      ageYears:
        minimum: 0
        type: integer
      bloodGroup:
        maxLength: 50
        type: string
      breed:
        maxLength: 100
        type: string
      chipNumber:
        maxLength: 50
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      hasChip:
        type: boolean
      isGuideDog:
        type: boolean
      isTherapist:
        type: boolean
      knowsBloodGroup:
        type: boolean
      latitude:
        type: number
      livingCondition:
        $ref: '#/definitions/models.LivingCondition'
      longitude:
        type: number
      name:
        maxLength: 100
        minLength: 1
        type: string
      photoUrl:
        maxLength: 255
        type: string
      sterilized:
        type: boolean
      type:
        $ref: '#/definitions/models.PetType'
      weightKg:
        minimum: 0
        type: number
    required:
    - name
    type: object
  services.PetUpdate:
    properties:
      ageMonths:
        maximum: 11
        minimum: 0
        type: integer
      ageYears:
        minimum: 0
        type: integer
      bloodGroup:
        maxLength: 50
        type: string
      breed:
        maxLength: 100
        type: string
      chipNumber:
        maxLength: 50
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      hasChip:
        type: boolean
      isGuideDog:
        type: boolean
      isTherapist:
        type: boolean
      knowsBloodGroup:
        type: boolean
      latitude:
        type: number
      livingCondition:
        $ref: '#/definitions/models.LivingCondition'
      longitude:
        type: number
      name:
        maxLength: 100
        minLength: 1
        type: string
      photoUrl:
        maxLength: 255
        type: string
      sterilized:
        type: boolean
      type:
        $ref: '#/definitions/models.PetType'
      weightKg:
        minimum: 0
        type: number
    type: object
  services.UserRegistration:
    properties:
      consentPd:
        type: boolean
      email:
        type: string
      fullName:
        maxLength: 255
        minLength: 2
        type: string
      locationId:
        minimum: 1
        type: integer
      phone:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - user
        - clinic_admin
    required:
    - consentPd
    - fullName
    - locationId
    - phone
    - role
    type: object
  services.UserUpdate:
    properties:
      allowGeo:
        type: boolean
      email:
        type: string
      fullName:
        maxLength: 255
        minLength: 2
        type: string
      locationId:
        minimum: 1
        type: integer
      onBoarding:
        type: boolean
      phone:
        type: string
    type: object
  services.VetClinicProfile:
    properties:
      clinic:
        $ref: '#/definitions/models.VetClinic'
    type: object
  services.VetClinicRegistration:
    properties:
      appointmentRequirementId:
        minimum: 1
        type: integer
      contactPersonName:
        type: string
      contactPersonPosition:
        type: string
      donorBonusPrograms:
        type: string
      latitude:
        type: number
      locationId:
        minimum: 1
        type: integer
      longitude:
        type: number
      name:
        maxLength: 255
        minLength: 2
        type: string
      phone:
        type: string
      transfusionConditions:
        type: string
      website:
        type: string
      workHours:
        type: string
    required:
    - appointmentRequirementId
    - locationId
    - name
    type: object
  services.VetClinicUpdate:
    properties:
      appointmentRequirementId:
        minimum: 1
        type: integer
      contactPersonName:
        type: string
      contactPersonPosition:
        type: string
      donorBonusPrograms:
        type: string
      locationId:
        minimum: 1
        type: integer
      name:
        maxLength: 255
        minLength: 2
        type: string
      phone:
        type: string
      transfusionConditions:
        type: string
      website:
        type: string
      workHours:
        type: string
    type: object
info:
  contact: {}
  description: API сервиса однойкрови.рф для донороcства крови и помощи животным
  title: однойкрови.рф
  version: "1.0"
paths:
  /:
    get:
      description: Возвращает информационное сообщение о сервере
      produces:
      - text/html
      responses:
        "200":
          description: Информационное сообщение с HTML-ссылкой
          schema:
            type: string
      summary: Корневой эндпоинт
      tags:
      - root
  /blood-stocks:
    get:
      description: Возвращает список всех запасов крови в системе
      produces:
      - application/json
      responses:
        "200":
          description: Список запасов крови
          schema:
            items:
              $ref: '#/definitions/models.BloodStock'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение всех запасов крови
      tags:
      - blood-stocks
    post:
      consumes:
      - application/json
      description: Создает новый запас крови в системе
      parameters:
      - description: Данные запаса крови
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.BloodStockCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Созданный запас крови
          schema:
            $ref: '#/definitions/models.BloodStock'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Клиника или тип крови не найдены
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Создание нового запаса крови
      tags:
      - blood-stocks
  /blood-stocks/{id}:
    delete:
      description: Удаляет запас крови из системы
      parameters:
      - description: ID запаса крови
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Запас крови успешно удален
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Запас крови не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Удаление запаса крови
      tags:
      - blood-stocks
    get:
      description: Возвращает информацию о конкретном запасе крови
      parameters:
      - description: ID запаса крови
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Запас крови
          schema:
            $ref: '#/definitions/models.BloodStock'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Запас крови не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение запаса крови по ID
      tags:
      - blood-stocks
    put:
      consumes:
      - application/json
      description: Обновляет информацию о запасе крови
      parameters:
      - description: ID запаса крови
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.BloodStockUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Запас крови успешно обновлен
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Запас крови не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Обновление запаса крови
      tags:
      - blood-stocks
  /blood-stocks/blood-type/{blood_type_id}:
    get:
      description: Возвращает все запасы крови для конкретного типа крови
      parameters:
      - description: ID типа крови
        in: path
        name: blood_type_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список запасов крови
          schema:
            items:
              $ref: '#/definitions/models.BloodStock'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Тип крови не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение запасов крови по типу крови
      tags:
      - blood-stocks
  /blood-stocks/clinic/{clinic_id}:
    get:
      description: Возвращает все запасы крови для конкретной клиники
      parameters:
      - description: ID клиники
        in: path
        name: clinic_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список запасов крови клиники
          schema:
            items:
              $ref: '#/definitions/models.BloodStock'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Клиника не найдена
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение запасов крови клиники
      tags:
      - blood-stocks
  /blood-stocks/search:
    get:
      consumes:
      - application/json
      description: Выполняет поиск запасов крови по различным параметрам (клиника,
        тип животного, тип крови, статус, объем, цена)
      parameters:
      - description: ID клиники
        in: query
        name: clinic_id
        type: integer
      - description: Тип животного (dog/cat)
        in: query
        name: pet_type
        type: string
      - description: ID типа крови
        in: query
        name: blood_type_id
        type: integer
      - description: Статус (active/reserved/used/expired)
        in: query
        name: status
        type: string
      - description: Минимальный объем (мл)
        in: query
        name: min_volume
        type: integer
      - description: Максимальный объем (мл)
        in: query
        name: max_volume
        type: integer
      - description: Минимальная цена (руб)
        in: query
        name: min_price
        type: number
      - description: Максимальная цена (руб)
        in: query
        name: max_price
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных запасов крови
          schema:
            items:
              $ref: '#/definitions/models.BloodStock'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Поиск запасов крови с фильтрами
      tags:
      - blood-stocks
  /pets/{id}:
    delete:
      description: Удаляет питомца из системы
      parameters:
      - description: ID питомца
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Питомец успешно удален
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Питомец не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Удаление питомца по ID
      tags:
      - pets
    get:
      description: Возвращает информацию о питомце по его идентификатору
      parameters:
      - description: ID питомца
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Данные питомца
          schema:
            $ref: '#/definitions/models.Pet'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Питомец не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение питомца по ID
      tags:
      - pets
    put:
      consumes:
      - application/json
      description: Обновляет информацию о питомце
      parameters:
      - description: ID питомца
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.PetUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Данные успешно обновлены
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Питомец не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Обновление данных питомца
      tags:
      - pets
  /pets/user/{user_id}:
    get:
      description: Возвращает всех питомцев конкретного пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список питомцев
          schema:
            items:
              $ref: '#/definitions/models.Pet'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение питомцев пользователя
      tags:
      - pets
    post:
      consumes:
      - application/json
      description: Создает нового питомца для пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      - description: Данные питомца
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.PetCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Созданный питомец
          schema:
            $ref: '#/definitions/models.Pet'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Создание нового питомца
      tags:
      - pets
  /reference/blood-components:
    get:
      description: Возвращает список компонентов крови животных для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список компонентов крови
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение компонентов крови животных
      tags:
      - reference
  /reference/blood-groups/{pet_type}:
    get:
      description: Возвращает список групп крови животных для выбора на фронтенде
      parameters:
      - description: Тип животного
        in: path
        name: pet_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список групп крови
          schema:
            $ref: '#/definitions/handlers.ReferenceResponseDB'
        "400":
          description: Неверный тип животного
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение групп крови животных по типу животного
      tags:
      - reference
  /reference/blood-search-statuses:
    get:
      description: Возвращает все доступные статусы поиска крови для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список статусов поиска крови
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех статусов поиска крови
      tags:
      - reference
  /reference/blood-stock-statuses:
    get:
      description: Возвращает все доступные статусы запаса крови для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список статусов запаса крови
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех статусов запаса крови
      tags:
      - reference
  /reference/breeds:
    get:
      description: Возвращает список всех пород животных в базе для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список пород животных
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение всех пород животных
      tags:
      - reference
  /reference/breeds-by-type:
    get:
      description: Возвращает список пород животных для указанного типа животного
        для выбора на фронтенде
      parameters:
      - description: Тип животного (dog, cat, etc.)
        in: query
        name: petType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список пород животных
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
        "400":
          description: Неверный тип животного
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение пород животных по типу
      tags:
      - reference
  /reference/donation-statuses:
    get:
      description: Возвращает все доступные статусы донорства для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список статусов донорства
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех статусов донорства
      tags:
      - reference
  /reference/genders:
    get:
      description: Возвращает все доступные значения пола для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список значений пола
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех значений пола
      tags:
      - reference
  /reference/living-conditions:
    get:
      description: Возвращает все доступные условия проживания для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список условий проживания
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех условий проживания
      tags:
      - reference
  /reference/locations:
    get:
      description: Возвращает список всех локаций в системе для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список локаций
          schema:
            $ref: '#/definitions/handlers.ReferenceResponseDB'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение всех локаций
      tags:
      - reference
  /reference/pet-types:
    get:
      description: Возвращает все доступные типы животных для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список типов животных
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех типов животных
      tags:
      - reference
  /reference/user-roles:
    get:
      description: Возвращает все доступные роли пользователей для выбора на фронтенде
      produces:
      - application/json
      responses:
        "200":
          description: Список ролей пользователей
          schema:
            $ref: '#/definitions/handlers.ReferenceResponse'
      summary: Получение всех ролей пользователей
      tags:
      - reference
  /user/{id}:
    delete:
      description: Удаляет пользователя из системы (soft delete)
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно удален
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Удаление пользователя по ID
      tags:
      - users
    get:
      description: Возвращает информацию о пользователе по его идентификатору
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение пользователя по ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Обновляет информацию о пользователе
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Данные успешно обновлены
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Обновление данных пользователя
      tags:
      - users
  /user/register:
    post:
      consumes:
      - application/json
      deprecated: true
      description: Регистрирует нового пользователя в системе
      parameters:
      - description: Данные для регистрации пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UserRegistration'
      produces:
      - application/json
      responses:
        "201":
          description: Зарегистрированный пользователь
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - users
  /user/register/simple:
    post:
      consumes:
      - application/json
      description: Создает пользователя с Telegram ID и именем (для команды Start)
      parameters:
      - description: Данные для простой регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SimpleRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Зарегистрированный пользователь
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Простая регистрация пользователя
      tags:
      - users
  /user/telegram:
    get:
      description: Возвращает информацию о пользователе по его Telegram ID
      parameters:
      - description: Telegram ID пользователя
        format: int64
        in: query
        name: telegram_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение пользователя по Telegram ID
      tags:
      - users
  /vet-clinics/{id}:
    delete:
      description: Удаляет клинику из системы (soft delete)
      parameters:
      - description: ID клиники
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Клиника успешно удалена
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Клиника не найдена
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Удаление клиники по ID
      tags:
      - vet-clinics
    get:
      description: Возвращает полный профиль ветеринарной клиники
      parameters:
      - description: ID клиники
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Профиль клиники
          schema:
            $ref: '#/definitions/services.VetClinicProfile'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Клиника не найдена
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение профиля клиники по ID
      tags:
      - vet-clinics
    put:
      consumes:
      - application/json
      description: Обновляет информацию о ветеринарной клинике
      parameters:
      - description: ID клиники
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.VetClinicUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Данные успешно обновлены
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Клиника не найдена
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Обновление профиля клиники
      tags:
      - vet-clinics
  /vet-clinics/location/{location_id}:
    get:
      description: Возвращает список всех ветеринарных клиник в указанной локации
      parameters:
      - description: ID локации
        in: path
        name: location_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список клиник
          schema:
            items:
              $ref: '#/definitions/models.VetClinic'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получение всех клиник по ID локации
      tags:
      - vet-clinics
  /vet-clinics/register:
    post:
      consumes:
      - application/json
      description: Регистрирует новую ветеринарную клинику в системе
      parameters:
      - description: Данные клиники
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.VetClinicRegistration'
      produces:
      - application/json
      responses:
        "201":
          description: Созданная клиника
          schema:
            $ref: '#/definitions/models.VetClinic'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Клиника уже существует
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Регистрация новой ветеринарной клиники
      tags:
      - vet-clinics
swagger: "2.0"
