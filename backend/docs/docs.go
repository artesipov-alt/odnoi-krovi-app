// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Возвращает информационное сообщение о сервере",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Корневой эндпоинт",
                "responses": {
                    "200": {
                        "description": "Информационное сообщение",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pets/user/{user_id}": {
            "get": {
                "description": "Возвращает всех питомцев конкретного пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Получение питомцев пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список питомцев",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает нового питомца для пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Создание нового питомца",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные питомца",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.PetCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Созданный питомец",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "description": "Возвращает информацию о питомце по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Получение питомца по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные питомца",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о питомце",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Обновление данных питомца",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.PetUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет питомца из системы",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Удаление питомца по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Питомец успешно удален",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/blood-groups": {
            "get": {
                "description": "Возвращает список групп крови животных для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение групп крови животных",
                "responses": {
                    "200": {
                        "description": "Список групп крови",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/blood-search-statuses": {
            "get": {
                "description": "Возвращает все доступные статусы поиска крови для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех статусов поиска крови",
                "responses": {
                    "200": {
                        "description": "Список статусов поиска крови",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/blood-stock-statuses": {
            "get": {
                "description": "Возвращает все доступные статусы запаса крови для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех статусов запаса крови",
                "responses": {
                    "200": {
                        "description": "Список статусов запаса крови",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/breeds": {
            "get": {
                "description": "Возвращает список популярных пород животных для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение популярных пород животных",
                "responses": {
                    "200": {
                        "description": "Список пород животных",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/breeds-by-type": {
            "get": {
                "description": "Возвращает список пород животных для указанного типа животного для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение пород животных по типу",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип животного (dog, cat, etc.)",
                        "name": "petType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список пород животных",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный тип животного",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/donation-statuses": {
            "get": {
                "description": "Возвращает все доступные статусы донорства для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех статусов донорства",
                "responses": {
                    "200": {
                        "description": "Список статусов донорства",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/genders": {
            "get": {
                "description": "Возвращает все доступные значения пола для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех значений пола",
                "responses": {
                    "200": {
                        "description": "Список значений пола",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/living-conditions": {
            "get": {
                "description": "Возвращает все доступные условия проживания для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех условий проживания",
                "responses": {
                    "200": {
                        "description": "Список условий проживания",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/pet-types": {
            "get": {
                "description": "Возвращает все доступные типы животных для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех типов животных",
                "responses": {
                    "200": {
                        "description": "Список типов животных",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/user-roles": {
            "get": {
                "description": "Возвращает все доступные роли пользователей для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех ролей пользователей",
                "responses": {
                    "200": {
                        "description": "Список ролей пользователей",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Регистрирует нового пользователя в системе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Регистрация нового пользователя",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "Данные для регистрации пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.UserRegistration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Зарегистрированный пользователь",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register/simple": {
            "post": {
                "description": "Создает пользователя с Telegram ID и именем (для команды Start)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Простая регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные для простой регистрации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Зарегистрированный пользователь",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/telegram": {
            "get": {
                "description": "Возвращает информацию о пользователе по его Telegram ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получение пользователя по Telegram ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Telegram ID пользователя",
                        "name": "telegram_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Возвращает информацию о пользователе по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получение пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о пользователе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Обновление данных пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет пользователя из системы (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Удаление пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно удален",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handlers.ReferenceItem": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "handlers.ReferenceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ReferenceItem"
                    }
                }
            }
        },
        "handlers.SimpleRegistrationRequest": {
            "type": "object",
            "required": [
                "telegram_id"
            ],
            "properties": {
                "full_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Иван Иванов"
                },
                "telegram_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 123456789
                }
            }
        },
        "handlers.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female"
            ],
            "x-enum-varnames": [
                "GenderMale",
                "GenderFemale"
            ]
        },
        "models.LivingCondition": {
            "type": "string",
            "enum": [
                "apartment",
                "house",
                "aviary",
                "other"
            ],
            "x-enum-varnames": [
                "LivingConditionApartment",
                "LivingConditionHouse",
                "LivingConditionAviary",
                "LivingConditionOther"
            ]
        },
        "models.Pet": {
            "type": "object",
            "properties": {
                "age_months": {
                    "type": "integer",
                    "example": 6
                },
                "age_years": {
                    "type": "integer",
                    "example": 3
                },
                "blood_group": {
                    "type": "string",
                    "example": "DEA 1.1"
                },
                "breed": {
                    "type": "string",
                    "example": "Лабрадор"
                },
                "chip_number": {
                    "type": "string",
                    "example": "123456789"
                },
                "deworming_date": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "ectoparasite_date": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "gender": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Gender"
                        }
                    ],
                    "example": "male"
                },
                "has_chip": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_guide_dog": {
                    "type": "boolean",
                    "example": false
                },
                "is_therapist": {
                    "type": "boolean",
                    "example": false
                },
                "knows_blood_group": {
                    "type": "boolean",
                    "example": false
                },
                "last_transfusion_date": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "latitude": {
                    "type": "number",
                    "example": 55.7558
                },
                "living_condition": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.LivingCondition"
                        }
                    ],
                    "example": "apartment"
                },
                "longitude": {
                    "type": "number",
                    "example": 37.6173
                },
                "name": {
                    "type": "string",
                    "example": "Бобик"
                },
                "owner_id": {
                    "type": "integer",
                    "example": 1
                },
                "photo_url": {
                    "type": "string",
                    "example": "https://example.com/photo.jpg"
                },
                "sterilized": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PetType"
                        }
                    ],
                    "example": "dog"
                },
                "vaccination_date": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "weight_kg": {
                    "type": "number",
                    "example": 25.5
                }
            }
        },
        "models.PetType": {
            "type": "string",
            "enum": [
                "dog",
                "cat"
            ],
            "x-enum-varnames": [
                "PetTypeDog",
                "PetTypeCat"
            ]
        },
        "models.User": {
            "type": "object",
            "properties": {
                "consent_pd": {
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "Иван Иванов"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "location_id": {
                    "type": "integer",
                    "example": 1
                },
                "organization_name": {
                    "type": "string",
                    "example": "ООО Ромашка"
                },
                "phone": {
                    "type": "string",
                    "example": "+79991234567"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "user"
                },
                "telegram_id": {
                    "type": "integer",
                    "example": 123456789
                }
            }
        },
        "models.UserRole": {
            "type": "string",
            "enum": [
                "user",
                "clinic",
                "admin",
                "donor"
            ],
            "x-enum-varnames": [
                "UserRoleUser",
                "UserRoleClinic",
                "UserRoleAdmin",
                "UserRoleDonor"
            ]
        },
        "services.PetCreate": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "age_months": {
                    "type": "integer",
                    "maximum": 11,
                    "minimum": 0
                },
                "age_years": {
                    "type": "integer",
                    "minimum": 0
                },
                "blood_group": {
                    "type": "string",
                    "maxLength": 50
                },
                "breed": {
                    "type": "string",
                    "maxLength": 100
                },
                "chip_number": {
                    "type": "string",
                    "maxLength": 50
                },
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "has_chip": {
                    "type": "boolean"
                },
                "is_guide_dog": {
                    "type": "boolean"
                },
                "is_therapist": {
                    "type": "boolean"
                },
                "knows_blood_group": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "living_condition": {
                    "$ref": "#/definitions/models.LivingCondition"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "photo_url": {
                    "type": "string",
                    "maxLength": 255
                },
                "sterilized": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/models.PetType"
                },
                "weight_kg": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "services.PetUpdate": {
            "type": "object",
            "properties": {
                "age_months": {
                    "type": "integer",
                    "maximum": 11,
                    "minimum": 0
                },
                "age_years": {
                    "type": "integer",
                    "minimum": 0
                },
                "blood_group": {
                    "type": "string",
                    "maxLength": 50
                },
                "breed": {
                    "type": "string",
                    "maxLength": 100
                },
                "chip_number": {
                    "type": "string",
                    "maxLength": 50
                },
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "has_chip": {
                    "type": "boolean"
                },
                "is_guide_dog": {
                    "type": "boolean"
                },
                "is_therapist": {
                    "type": "boolean"
                },
                "knows_blood_group": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "living_condition": {
                    "$ref": "#/definitions/models.LivingCondition"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "photo_url": {
                    "type": "string",
                    "maxLength": 255
                },
                "sterilized": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/models.PetType"
                },
                "weight_kg": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "services.UserRegistration": {
            "type": "object",
            "required": [
                "consent_pd",
                "full_name",
                "location_id",
                "phone",
                "role"
            ],
            "properties": {
                "consent_pd": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "location_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "organization_name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "user",
                        "clinic_admin"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ]
                }
            }
        },
        "services.UserUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "location_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "organization_name": {
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "однойкрови.рф",
	Description:      "API сервиса однойкрови.рф для донороcства крови и помощи животным",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
