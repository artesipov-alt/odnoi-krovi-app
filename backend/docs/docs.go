// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Возвращает информационное сообщение о сервере",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Корневой эндпоинт",
                "responses": {
                    "200": {
                        "description": "Информационное сообщение с HTML-ссылкой",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blood-stocks": {
            "get": {
                "description": "Возвращает список всех запасов крови в системе",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Получение всех запасов крови",
                "responses": {
                    "200": {
                        "description": "Список запасов крови",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BloodStock"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новый запас крови в системе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Создание нового запаса крови",
                "parameters": [
                    {
                        "description": "Данные запаса крови",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.BloodStockCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Созданный запас крови",
                        "schema": {
                            "$ref": "#/definitions/models.BloodStock"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Клиника или тип крови не найдены",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blood-stocks/blood-type/{blood_type_id}": {
            "get": {
                "description": "Возвращает все запасы крови для конкретного типа крови",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Получение запасов крови по типу крови",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID типа крови",
                        "name": "blood_type_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список запасов крови",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BloodStock"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Тип крови не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blood-stocks/clinic/{clinic_id}": {
            "get": {
                "description": "Возвращает все запасы крови для конкретной клиники",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Получение запасов крови клиники",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID клиники",
                        "name": "clinic_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список запасов крови клиники",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BloodStock"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Клиника не найдена",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blood-stocks/search": {
            "get": {
                "description": "Выполняет поиск запасов крови по различным параметрам (клиника, тип животного, тип крови, статус, объем, цена)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Поиск запасов крови с фильтрами",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID клиники",
                        "name": "clinic_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Тип животного (dog/cat)",
                        "name": "pet_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "ID типа крови",
                        "name": "blood_type_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Статус (active/reserved/used/expired)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Минимальный объем (мл)",
                        "name": "min_volume",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Максимальный объем (мл)",
                        "name": "max_volume",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Минимальная цена (руб)",
                        "name": "min_price",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Максимальная цена (руб)",
                        "name": "max_price",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список найденных запасов крови",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BloodStock"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blood-stocks/{id}": {
            "get": {
                "description": "Возвращает информацию о конкретном запасе крови",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Получение запаса крови по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID запаса крови",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запас крови",
                        "schema": {
                            "$ref": "#/definitions/models.BloodStock"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Запас крови не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о запасе крови",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Обновление запаса крови",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID запаса крови",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.BloodStockUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запас крови успешно обновлен",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Запас крови не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет запас крови из системы",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blood-stocks"
                ],
                "summary": "Удаление запаса крови",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID запаса крови",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запас крови успешно удален",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Запас крови не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pets/user/{user_id}": {
            "get": {
                "description": "Возвращает всех питомцев конкретного пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Получение питомцев пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список питомцев",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает нового питомца для пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Создание нового питомца",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные питомца",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.PetCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Созданный питомец",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "description": "Возвращает информацию о питомце по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Получение питомца по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные питомца",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о питомце",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Обновление данных питомца",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.PetUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет питомца из системы",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Удаление питомца по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID питомца",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Питомец успешно удален",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Питомец не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/blood-groups": {
            "get": {
                "description": "Возвращает список групп крови животных для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение групп крови животных",
                "responses": {
                    "200": {
                        "description": "Список групп крови",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/blood-search-statuses": {
            "get": {
                "description": "Возвращает все доступные статусы поиска крови для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех статусов поиска крови",
                "responses": {
                    "200": {
                        "description": "Список статусов поиска крови",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/blood-stock-statuses": {
            "get": {
                "description": "Возвращает все доступные статусы запаса крови для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех статусов запаса крови",
                "responses": {
                    "200": {
                        "description": "Список статусов запаса крови",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/breeds": {
            "get": {
                "description": "Возвращает список всех пород животных в базе для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех пород животных",
                "responses": {
                    "200": {
                        "description": "Список пород животных",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/breeds-by-type": {
            "get": {
                "description": "Возвращает список пород животных для указанного типа животного для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение пород животных по типу",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип животного (dog, cat, etc.)",
                        "name": "petType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список пород животных",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный тип животного",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reference/donation-statuses": {
            "get": {
                "description": "Возвращает все доступные статусы донорства для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех статусов донорства",
                "responses": {
                    "200": {
                        "description": "Список статусов донорства",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/genders": {
            "get": {
                "description": "Возвращает все доступные значения пола для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех значений пола",
                "responses": {
                    "200": {
                        "description": "Список значений пола",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/living-conditions": {
            "get": {
                "description": "Возвращает все доступные условия проживания для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех условий проживания",
                "responses": {
                    "200": {
                        "description": "Список условий проживания",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/pet-types": {
            "get": {
                "description": "Возвращает все доступные типы животных для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех типов животных",
                "responses": {
                    "200": {
                        "description": "Список типов животных",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/reference/user-roles": {
            "get": {
                "description": "Возвращает все доступные роли пользователей для выбора на фронтенде",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Получение всех ролей пользователей",
                "responses": {
                    "200": {
                        "description": "Список ролей пользователей",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReferenceResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Регистрирует нового пользователя в системе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Регистрация нового пользователя",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "Данные для регистрации пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.UserRegistration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Зарегистрированный пользователь",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register/simple": {
            "post": {
                "description": "Создает пользователя с Telegram ID и именем (для команды Start)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Простая регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные для простой регистрации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SimpleRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Зарегистрированный пользователь",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/telegram": {
            "get": {
                "description": "Возвращает информацию о пользователе по его Telegram ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получение пользователя по Telegram ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Telegram ID пользователя",
                        "name": "telegram_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Возвращает информацию о пользователе по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получение пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о пользователе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Обновление данных пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет пользователя из системы (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Удаление пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно удален",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vet-clinics/location/{location_id}": {
            "get": {
                "description": "Возвращает список всех ветеринарных клиник в указанной локации",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vet-clinics"
                ],
                "summary": "Получение всех клиник по ID локации",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID локации",
                        "name": "location_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список клиник",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.VetClinic"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vet-clinics/register": {
            "post": {
                "description": "Регистрирует новую ветеринарную клинику в системе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vet-clinics"
                ],
                "summary": "Регистрация новой ветеринарной клиники",
                "parameters": [
                    {
                        "description": "Данные клиники",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.VetClinicRegistration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Созданная клиника",
                        "schema": {
                            "$ref": "#/definitions/models.VetClinic"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Клиника уже существует",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vet-clinics/{id}": {
            "get": {
                "description": "Возвращает полный профиль ветеринарной клиники",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vet-clinics"
                ],
                "summary": "Получение профиля клиники по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID клиники",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Профиль клиники",
                        "schema": {
                            "$ref": "#/definitions/services.VetClinicProfile"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Клиника не найдена",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о ветеринарной клинике",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vet-clinics"
                ],
                "summary": "Обновление профиля клиники",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID клиники",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.VetClinicUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Клиника не найдена",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет клинику из системы (soft delete)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vet-clinics"
                ],
                "summary": "Удаление клиники по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID клиники",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Клиника успешно удалена",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Клиника не найдена",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handlers.ReferenceItem": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "handlers.ReferenceResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ReferenceItem"
                    }
                }
            }
        },
        "handlers.SimpleRegistrationRequest": {
            "type": "object",
            "required": [
                "telegramId"
            ],
            "properties": {
                "fullName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Иван Иванов"
                },
                "telegramId": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 123456789
                }
            }
        },
        "handlers.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "models.BloodStock": {
            "type": "object",
            "properties": {
                "bloodTypeId": {
                    "type": "integer",
                    "example": 1
                },
                "clinicId": {
                    "type": "integer",
                    "example": 1
                },
                "expirationDate": {
                    "type": "string",
                    "example": "2024-12-31"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "petType": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PetType"
                        }
                    ],
                    "example": "dog"
                },
                "priceRub": {
                    "type": "number",
                    "example": 5000
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BloodStockStatus"
                        }
                    ],
                    "example": "active"
                },
                "volumeMl": {
                    "type": "integer",
                    "example": 500
                }
            }
        },
        "models.BloodStockStatus": {
            "type": "string",
            "enum": [
                "active",
                "reserved",
                "used",
                "expired"
            ],
            "x-enum-varnames": [
                "BloodStockStatusActive",
                "BloodStockStatusReserved",
                "BloodStockStatusUsed",
                "BloodStockStatusExpired"
            ]
        },
        "models.DonorRequirements": {
            "type": "object",
            "properties": {
                "bloodTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "healthConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxAge": {
                    "type": "integer"
                },
                "minAge": {
                    "type": "integer"
                },
                "minWeight": {
                    "type": "number"
                },
                "vaccinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female"
            ],
            "x-enum-varnames": [
                "GenderMale",
                "GenderFemale"
            ]
        },
        "models.LivingCondition": {
            "type": "string",
            "enum": [
                "apartment",
                "house",
                "aviary",
                "other"
            ],
            "x-enum-varnames": [
                "LivingConditionApartment",
                "LivingConditionHouse",
                "LivingConditionAviary",
                "LivingConditionOther"
            ]
        },
        "models.Pet": {
            "type": "object",
            "properties": {
                "ageMonths": {
                    "type": "integer",
                    "example": 6
                },
                "ageYears": {
                    "type": "integer",
                    "example": 3
                },
                "bloodGroup": {
                    "type": "string",
                    "example": "DEA 1.1"
                },
                "breed": {
                    "type": "string",
                    "example": "Лабрадор"
                },
                "chipNumber": {
                    "type": "string",
                    "example": "123456789"
                },
                "dewormingDate": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "ectoparasiteDate": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "gender": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Gender"
                        }
                    ],
                    "example": "male"
                },
                "hasChip": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "isGuideDog": {
                    "type": "boolean",
                    "example": false
                },
                "isTherapist": {
                    "type": "boolean",
                    "example": false
                },
                "knowsBloodGroup": {
                    "type": "boolean",
                    "example": false
                },
                "lastTransfusionDate": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "latitude": {
                    "type": "number",
                    "example": 55.7558
                },
                "livingCondition": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.LivingCondition"
                        }
                    ],
                    "example": "apartment"
                },
                "longitude": {
                    "type": "number",
                    "example": 37.6173
                },
                "name": {
                    "type": "string",
                    "example": "Бобик"
                },
                "ownerId": {
                    "type": "integer",
                    "example": 1
                },
                "photoUrl": {
                    "type": "string",
                    "example": "https://example.com/photo.jpg"
                },
                "sterilized": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PetType"
                        }
                    ],
                    "example": "dog"
                },
                "vaccinationDate": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "weightKg": {
                    "type": "number",
                    "example": 25.5
                }
            }
        },
        "models.PetType": {
            "type": "string",
            "enum": [
                "dog",
                "cat"
            ],
            "x-enum-varnames": [
                "PetTypeDog",
                "PetTypeCat"
            ]
        },
        "models.User": {
            "type": "object",
            "properties": {
                "allowGeo": {
                    "type": "boolean",
                    "example": true
                },
                "consentPd": {
                    "type": "boolean",
                    "example": true
                },
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "Иван Иванов"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "locationId": {
                    "type": "integer",
                    "example": 1
                },
                "onBoarding": {
                    "type": "boolean",
                    "example": false
                },
                "organizationName": {
                    "type": "string",
                    "example": "ООО Ромашка"
                },
                "phone": {
                    "type": "string",
                    "example": "+79991234567"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "user"
                },
                "telegramId": {
                    "type": "integer",
                    "example": 123456789
                }
            }
        },
        "models.UserRole": {
            "type": "string",
            "enum": [
                "user",
                "clinic",
                "admin",
                "donor"
            ],
            "x-enum-varnames": [
                "UserRoleUser",
                "UserRoleClinic",
                "UserRoleAdmin",
                "UserRoleDonor"
            ]
        },
        "models.VetClinic": {
            "type": "object",
            "properties": {
                "appointmentRequirementId": {
                    "type": "integer",
                    "example": 1
                },
                "clinicId": {
                    "type": "integer",
                    "example": 1
                },
                "contactPersonName": {
                    "type": "string",
                    "example": "Мария Петрова"
                },
                "contactPersonPosition": {
                    "type": "string",
                    "example": "Администратор"
                },
                "donorBonusPrograms": {
                    "type": "string",
                    "example": "Бонусные программы для доноров"
                },
                "donorRequirements": {
                    "$ref": "#/definitions/models.DonorRequirements"
                },
                "latitude": {
                    "type": "number",
                    "example": 55.7558
                },
                "locationId": {
                    "type": "integer",
                    "example": 1
                },
                "longitude": {
                    "type": "number",
                    "example": 37.6173
                },
                "name": {
                    "type": "string",
                    "example": "ВетКлиника ЗооДоктор"
                },
                "phone": {
                    "type": "string",
                    "example": "+79991234567"
                },
                "transfusionConditions": {
                    "type": "string",
                    "example": "Условия для переливания крови"
                },
                "website": {
                    "type": "string",
                    "example": "https://vetclinic.example.com"
                },
                "workHours": {
                    "type": "string",
                    "example": "Пн-Пт: 9:00-18:00"
                }
            }
        },
        "services.BloodStockCreate": {
            "type": "object",
            "required": [
                "bloodTypeId",
                "petType"
            ],
            "properties": {
                "bloodTypeId": {
                    "type": "integer",
                    "minimum": 1
                },
                "clinicId": {
                    "type": "integer",
                    "minimum": 1
                },
                "expirationDate": {
                    "description": "формат: \"2024-12-31\"",
                    "type": "string"
                },
                "petType": {
                    "enum": [
                        "dog",
                        "cat"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PetType"
                        }
                    ]
                },
                "status": {
                    "enum": [
                        "active",
                        "reserved",
                        "used",
                        "expired"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BloodStockStatus"
                        }
                    ]
                },
                "volumeMl": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "services.BloodStockUpdate": {
            "type": "object",
            "properties": {
                "expirationDate": {
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "active",
                        "reserved",
                        "used",
                        "expired"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BloodStockStatus"
                        }
                    ]
                },
                "volumeMl": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "services.PetCreate": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "ageMonths": {
                    "type": "integer",
                    "maximum": 11,
                    "minimum": 0
                },
                "ageYears": {
                    "type": "integer",
                    "minimum": 0
                },
                "bloodGroup": {
                    "type": "string",
                    "maxLength": 50
                },
                "breed": {
                    "type": "string",
                    "maxLength": 100
                },
                "chipNumber": {
                    "type": "string",
                    "maxLength": 50
                },
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "hasChip": {
                    "type": "boolean"
                },
                "isGuideDog": {
                    "type": "boolean"
                },
                "isTherapist": {
                    "type": "boolean"
                },
                "knowsBloodGroup": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "livingCondition": {
                    "$ref": "#/definitions/models.LivingCondition"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "photoUrl": {
                    "type": "string",
                    "maxLength": 255
                },
                "sterilized": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/models.PetType"
                },
                "weightKg": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "services.PetUpdate": {
            "type": "object",
            "properties": {
                "ageMonths": {
                    "type": "integer",
                    "maximum": 11,
                    "minimum": 0
                },
                "ageYears": {
                    "type": "integer",
                    "minimum": 0
                },
                "bloodGroup": {
                    "type": "string",
                    "maxLength": 50
                },
                "breed": {
                    "type": "string",
                    "maxLength": 100
                },
                "chipNumber": {
                    "type": "string",
                    "maxLength": 50
                },
                "gender": {
                    "$ref": "#/definitions/models.Gender"
                },
                "hasChip": {
                    "type": "boolean"
                },
                "isGuideDog": {
                    "type": "boolean"
                },
                "isTherapist": {
                    "type": "boolean"
                },
                "knowsBloodGroup": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "livingCondition": {
                    "$ref": "#/definitions/models.LivingCondition"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "photoUrl": {
                    "type": "string",
                    "maxLength": 255
                },
                "sterilized": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/models.PetType"
                },
                "weightKg": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "services.UserRegistration": {
            "type": "object",
            "required": [
                "consentPd",
                "fullName",
                "locationId",
                "phone",
                "role"
            ],
            "properties": {
                "consentPd": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "locationId": {
                    "type": "integer",
                    "minimum": 1
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "user",
                        "clinic_admin"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ]
                }
            }
        },
        "services.UserUpdate": {
            "type": "object",
            "properties": {
                "allowGeo": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "locationId": {
                    "type": "integer",
                    "minimum": 1
                },
                "onBoarding": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "services.VetClinicProfile": {
            "type": "object",
            "properties": {
                "clinic": {
                    "$ref": "#/definitions/models.VetClinic"
                }
            }
        },
        "services.VetClinicRegistration": {
            "type": "object",
            "required": [
                "appointmentRequirementId",
                "locationId",
                "name"
            ],
            "properties": {
                "appointmentRequirementId": {
                    "type": "integer",
                    "minimum": 1
                },
                "contactPersonName": {
                    "type": "string"
                },
                "contactPersonPosition": {
                    "type": "string"
                },
                "donorBonusPrograms": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "locationId": {
                    "type": "integer",
                    "minimum": 1
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "phone": {
                    "type": "string"
                },
                "transfusionConditions": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                },
                "workHours": {
                    "type": "string"
                }
            }
        },
        "services.VetClinicUpdate": {
            "type": "object",
            "properties": {
                "appointmentRequirementId": {
                    "type": "integer",
                    "minimum": 1
                },
                "contactPersonName": {
                    "type": "string"
                },
                "contactPersonPosition": {
                    "type": "string"
                },
                "donorBonusPrograms": {
                    "type": "string"
                },
                "locationId": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "phone": {
                    "type": "string"
                },
                "transfusionConditions": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                },
                "workHours": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "однойкрови.рф",
	Description:      "API сервиса однойкрови.рф для донороcства крови и помощи животным",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
