import type { Context } from "grammy";
import { BotError, InlineKeyboard } from "grammy";
import { Templates } from "../config/templates";

const getMainKeyboard = () => {
  return new InlineKeyboard()
    .webApp("ü©∏ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", Bun.env.MINIAPP_DOMAIN!)
    .row()
    .text("‚ùì –ü–æ–º–æ—â—å", "help")
    .text("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile");
};

const getBackKeyboard = () => {
  return new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back");
};

export const startHandler = async (ctx: Context) => {
  const keyboard = getMainKeyboard();

  if (ctx.message?.text === "/start") {
    await ctx.reply(Templates.START.MESSAGE, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } else {
    await ctx.editMessageText(Templates.START.MESSAGE, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  }
};

export const helpHandler = async (ctx: Context) => {
  const keyboard = getBackKeyboard();

  if (ctx.message?.text === "/help") {
    await ctx.reply(Templates.HELP.MESSAGE, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } else {
    await ctx.editMessageText(Templates.HELP.MESSAGE, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  }
};

export const profileHandler = async (ctx: Context) => {
  const keyboard = new InlineKeyboard()
    .webApp("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", Bun.env.MINIAPP_DOMAIN!)
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back");

  if (ctx.message?.text === "/profile") {
    await ctx.reply(Templates.PROFILE.MESSAGE, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } else {
    await ctx.editMessageText(Templates.PROFILE.MESSAGE, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  }
};

export const errCommandTest = async (ctx: Context) => {
  await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ —Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ");
  throw new Error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
};
