/**
 * однойкрови.рф
 * API сервиса однойкрови.рф для донороcства крови и помощи животным
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("BloodStocksApi", () => {
  let instance: api.BloodStocksApi
  beforeEach(function() {
    instance = new api.BloodStocksApi(config)
  });

  test("bloodStocksBloodTypeBloodTypeIdGet", () => {
    const bloodTypeId: number = 56
    return expect(instance.bloodStocksBloodTypeBloodTypeIdGet(bloodTypeId, {})).resolves.toBe(null)
  })
  test("bloodStocksClinicClinicIdGet", () => {
    const clinicId: number = 56
    return expect(instance.bloodStocksClinicClinicIdGet(clinicId, {})).resolves.toBe(null)
  })
  test("bloodStocksGet", () => {
    return expect(instance.bloodStocksGet({})).resolves.toBe(null)
  })
  test("bloodStocksIdDelete", () => {
    const id: number = 56
    return expect(instance.bloodStocksIdDelete(id, {})).resolves.toBe(null)
  })
  test("bloodStocksIdGet", () => {
    const id: number = 56
    return expect(instance.bloodStocksIdGet(id, {})).resolves.toBe(null)
  })
  test("bloodStocksIdPut", () => {
    const body: api.ServicesBloodStockUpdate = undefined
    const id: number = 56
    return expect(instance.bloodStocksIdPut(body, id, {})).resolves.toBe(null)
  })
  test("bloodStocksPost", () => {
    const body: api.ServicesBloodStockCreate = undefined
    return expect(instance.bloodStocksPost(body, {})).resolves.toBe(null)
  })
  test("bloodStocksSearchGet", () => {
    const clinicId: number = 56
    const petType: string = "petType_example"
    const bloodTypeId: number = 56
    const status: string = "status_example"
    const minVolume: number = 56
    const maxVolume: number = 56
    const minPrice: number = 1.2
    const maxPrice: number = 1.2
    return expect(instance.bloodStocksSearchGet(clinicId, petType, bloodTypeId, status, minVolume, maxVolume, minPrice, maxPrice, {})).resolves.toBe(null)
  })
})

describe("PetsApi", () => {
  let instance: api.PetsApi
  beforeEach(function() {
    instance = new api.PetsApi(config)
  });

  test("petsIdDelete", () => {
    const id: number = 56
    return expect(instance.petsIdDelete(id, {})).resolves.toBe(null)
  })
  test("petsIdGet", () => {
    const id: number = 56
    return expect(instance.petsIdGet(id, {})).resolves.toBe(null)
  })
  test("petsIdPut", () => {
    const body: api.ServicesPetUpdate = undefined
    const id: number = 56
    return expect(instance.petsIdPut(body, id, {})).resolves.toBe(null)
  })
  test("petsUserUserIdGet", () => {
    const userId: number = 56
    return expect(instance.petsUserUserIdGet(userId, {})).resolves.toBe(null)
  })
  test("petsUserUserIdPost", () => {
    const body: api.ServicesPetCreate = undefined
    const userId: number = 56
    return expect(instance.petsUserUserIdPost(body, userId, {})).resolves.toBe(null)
  })
})

describe("ReferenceApi", () => {
  let instance: api.ReferenceApi
  beforeEach(function() {
    instance = new api.ReferenceApi(config)
  });

  test("referenceBloodGroupsGet", () => {
    return expect(instance.referenceBloodGroupsGet({})).resolves.toBe(null)
  })
  test("referenceBloodSearchStatusesGet", () => {
    return expect(instance.referenceBloodSearchStatusesGet({})).resolves.toBe(null)
  })
  test("referenceBloodStockStatusesGet", () => {
    return expect(instance.referenceBloodStockStatusesGet({})).resolves.toBe(null)
  })
  test("referenceBreedsByTypeGet", () => {
    const petType: string = "petType_example"
    return expect(instance.referenceBreedsByTypeGet(petType, {})).resolves.toBe(null)
  })
  test("referenceBreedsGet", () => {
    return expect(instance.referenceBreedsGet({})).resolves.toBe(null)
  })
  test("referenceDonationStatusesGet", () => {
    return expect(instance.referenceDonationStatusesGet({})).resolves.toBe(null)
  })
  test("referenceGendersGet", () => {
    return expect(instance.referenceGendersGet({})).resolves.toBe(null)
  })
  test("referenceLivingConditionsGet", () => {
    return expect(instance.referenceLivingConditionsGet({})).resolves.toBe(null)
  })
  test("referencePetTypesGet", () => {
    return expect(instance.referencePetTypesGet({})).resolves.toBe(null)
  })
  test("referenceUserRolesGet", () => {
    return expect(instance.referenceUserRolesGet({})).resolves.toBe(null)
  })
})

describe("RootApi", () => {
  let instance: api.RootApi
  beforeEach(function() {
    instance = new api.RootApi(config)
  });

  test("rootGet", () => {
    return expect(instance.rootGet({})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("userIdDelete", () => {
    const id: number = 56
    return expect(instance.userIdDelete(id, {})).resolves.toBe(null)
  })
  test("userIdGet", () => {
    const id: number = 56
    return expect(instance.userIdGet(id, {})).resolves.toBe(null)
  })
  test("userIdPut", () => {
    const body: api.ServicesUserUpdate = undefined
    const id: number = 56
    return expect(instance.userIdPut(body, id, {})).resolves.toBe(null)
  })
  test("userRegisterPost", () => {
    const body: api.ServicesUserRegistration = undefined
    return expect(instance.userRegisterPost(body, {})).resolves.toBe(null)
  })
  test("userRegisterSimplePost", () => {
    const body: api.HandlersSimpleRegistrationRequest = undefined
    return expect(instance.userRegisterSimplePost(body, {})).resolves.toBe(null)
  })
  test("userTelegramGet", () => {
    const telegramId: number = 789
    return expect(instance.userTelegramGet(telegramId, {})).resolves.toBe(null)
  })
})

describe("VetClinicsApi", () => {
  let instance: api.VetClinicsApi
  beforeEach(function() {
    instance = new api.VetClinicsApi(config)
  });

  test("vetClinicsIdDelete", () => {
    const id: number = 56
    return expect(instance.vetClinicsIdDelete(id, {})).resolves.toBe(null)
  })
  test("vetClinicsIdGet", () => {
    const id: number = 56
    return expect(instance.vetClinicsIdGet(id, {})).resolves.toBe(null)
  })
  test("vetClinicsIdPut", () => {
    const body: api.ServicesVetClinicUpdate = undefined
    const id: number = 56
    return expect(instance.vetClinicsIdPut(body, id, {})).resolves.toBe(null)
  })
  test("vetClinicsLocationLocationIdGet", () => {
    const locationId: number = 56
    return expect(instance.vetClinicsLocationLocationIdGet(locationId, {})).resolves.toBe(null)
  })
  test("vetClinicsRegisterPost", () => {
    const body: api.ServicesVetClinicRegistration = undefined
    return expect(instance.vetClinicsRegisterPost(body, {})).resolves.toBe(null)
  })
})

