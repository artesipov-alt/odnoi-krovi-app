/* tslint:disable */
/* eslint-disable */
/**
 * однойкрови.рф
 * API сервиса однойкрови.рф для донороcства крови и помощи животным
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  HandlersReferenceResponse,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersReferenceResponseFromJSON,
    HandlersReferenceResponseToJSON,
} from '../models/index';

export interface ReferenceBreedsByTypeGetRequest {
    petType: string;
}

/**
 * 
 */
export class ReferenceApi extends runtime.BaseAPI {

    /**
     * Возвращает список групп крови животных для выбора на фронтенде
     * Получение групп крови животных
     */
    async referenceBloodGroupsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/blood-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список групп крови животных для выбора на фронтенде
     * Получение групп крови животных
     */
    async referenceBloodGroupsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceBloodGroupsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные статусы поиска крови для выбора на фронтенде
     * Получение всех статусов поиска крови
     */
    async referenceBloodSearchStatusesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/blood-search-statuses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные статусы поиска крови для выбора на фронтенде
     * Получение всех статусов поиска крови
     */
    async referenceBloodSearchStatusesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceBloodSearchStatusesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные статусы запаса крови для выбора на фронтенде
     * Получение всех статусов запаса крови
     */
    async referenceBloodStockStatusesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/blood-stock-statuses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные статусы запаса крови для выбора на фронтенде
     * Получение всех статусов запаса крови
     */
    async referenceBloodStockStatusesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceBloodStockStatusesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список пород животных для указанного типа животного для выбора на фронтенде
     * Получение пород животных по типу
     */
    async referenceBreedsByTypeGetRaw(requestParameters: ReferenceBreedsByTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        if (requestParameters['petType'] == null) {
            throw new runtime.RequiredError(
                'petType',
                'Required parameter "petType" was null or undefined when calling referenceBreedsByTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['petType'] != null) {
            queryParameters['petType'] = requestParameters['petType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/breeds-by-type`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список пород животных для указанного типа животного для выбора на фронтенде
     * Получение пород животных по типу
     */
    async referenceBreedsByTypeGet(requestParameters: ReferenceBreedsByTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceBreedsByTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список всех пород животных в базе для выбора на фронтенде
     * Получение всех пород животных
     */
    async referenceBreedsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/breeds`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список всех пород животных в базе для выбора на фронтенде
     * Получение всех пород животных
     */
    async referenceBreedsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceBreedsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные статусы донорства для выбора на фронтенде
     * Получение всех статусов донорства
     */
    async referenceDonationStatusesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/donation-statuses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные статусы донорства для выбора на фронтенде
     * Получение всех статусов донорства
     */
    async referenceDonationStatusesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceDonationStatusesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные значения пола для выбора на фронтенде
     * Получение всех значений пола
     */
    async referenceGendersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/genders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные значения пола для выбора на фронтенде
     * Получение всех значений пола
     */
    async referenceGendersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceGendersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные условия проживания для выбора на фронтенде
     * Получение всех условий проживания
     */
    async referenceLivingConditionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/living-conditions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные условия проживания для выбора на фронтенде
     * Получение всех условий проживания
     */
    async referenceLivingConditionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceLivingConditionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные типы животных для выбора на фронтенде
     * Получение всех типов животных
     */
    async referencePetTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/pet-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные типы животных для выбора на фронтенде
     * Получение всех типов животных
     */
    async referencePetTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referencePetTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все доступные роли пользователей для выбора на фронтенде
     * Получение всех ролей пользователей
     */
    async referenceUserRolesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersReferenceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/reference/user-roles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все доступные роли пользователей для выбора на фронтенде
     * Получение всех ролей пользователей
     */
    async referenceUserRolesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersReferenceResponse> {
        const response = await this.referenceUserRolesGetRaw(initOverrides);
        return await response.value();
    }

}
