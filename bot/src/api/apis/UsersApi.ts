/* tslint:disable */
/* eslint-disable */
/**
 * однойкрови.рф
 * API сервиса однойкрови.рф для донороcства крови и помощи животным
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  HandlersSimpleRegistrationRequest,
  HandlersSuccessResponse,
  ModelsUser,
  ServicesUserRegistration,
  ServicesUserUpdate,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersSimpleRegistrationRequestFromJSON,
    HandlersSimpleRegistrationRequestToJSON,
    HandlersSuccessResponseFromJSON,
    HandlersSuccessResponseToJSON,
    ModelsUserFromJSON,
    ModelsUserToJSON,
    ServicesUserRegistrationFromJSON,
    ServicesUserRegistrationToJSON,
    ServicesUserUpdateFromJSON,
    ServicesUserUpdateToJSON,
} from '../models/index';

export interface UserIdDeleteRequest {
    id: number;
}

export interface UserIdGetRequest {
    id: number;
}

export interface UserIdPutRequest {
    id: number;
    request: ServicesUserUpdate;
}

export interface UserRegisterPostRequest {
    request: ServicesUserRegistration;
}

export interface UserRegisterSimplePostRequest {
    request: HandlersSimpleRegistrationRequest;
}

export interface UserTelegramGetRequest {
    telegramId: number;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Удаляет пользователя из системы (soft delete)
     * Удаление пользователя по ID
     */
    async userIdDeleteRaw(requestParameters: UserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/user/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет пользователя из системы (soft delete)
     * Удаление пользователя по ID
     */
    async userIdDelete(requestParameters: UserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.userIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о пользователе по его идентификатору
     * Получение пользователя по ID
     */
    async userIdGetRaw(requestParameters: UserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsUser>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/user/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsUserFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о пользователе по его идентификатору
     * Получение пользователя по ID
     */
    async userIdGet(requestParameters: UserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsUser> {
        const response = await this.userIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет информацию о пользователе
     * Обновление данных пользователя
     */
    async userIdPutRaw(requestParameters: UserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling userIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesUserUpdateToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Обновляет информацию о пользователе
     * Обновление данных пользователя
     */
    async userIdPut(requestParameters: UserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.userIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Регистрирует нового пользователя в системе
     * Регистрация нового пользователя
     * @deprecated
     */
    async userRegisterPostRaw(requestParameters: UserRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsUser>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling userRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesUserRegistrationToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsUserFromJSON(jsonValue));
    }

    /**
     * Регистрирует нового пользователя в системе
     * Регистрация нового пользователя
     * @deprecated
     */
    async userRegisterPost(requestParameters: UserRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsUser> {
        const response = await this.userRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создает пользователя с Telegram ID и именем (для команды Start)
     * Простая регистрация пользователя
     */
    async userRegisterSimplePostRaw(requestParameters: UserRegisterSimplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsUser>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling userRegisterSimplePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/register/simple`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersSimpleRegistrationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsUserFromJSON(jsonValue));
    }

    /**
     * Создает пользователя с Telegram ID и именем (для команды Start)
     * Простая регистрация пользователя
     */
    async userRegisterSimplePost(requestParameters: UserRegisterSimplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsUser> {
        const response = await this.userRegisterSimplePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о пользователе по его Telegram ID
     * Получение пользователя по Telegram ID
     */
    async userTelegramGetRaw(requestParameters: UserTelegramGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsUser>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling userTelegramGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegram_id'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/user/telegram`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsUserFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о пользователе по его Telegram ID
     * Получение пользователя по Telegram ID
     */
    async userTelegramGet(requestParameters: UserTelegramGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsUser> {
        const response = await this.userTelegramGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
