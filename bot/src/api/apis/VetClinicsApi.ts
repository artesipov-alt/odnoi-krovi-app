/* tslint:disable */
/* eslint-disable */
/**
 * однойкрови.рф
 * API сервиса однойкрови.рф для донороcства крови и помощи животным
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  HandlersSuccessResponse,
  ModelsVetClinic,
  ServicesVetClinicProfile,
  ServicesVetClinicRegistration,
  ServicesVetClinicUpdate,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersSuccessResponseFromJSON,
    HandlersSuccessResponseToJSON,
    ModelsVetClinicFromJSON,
    ModelsVetClinicToJSON,
    ServicesVetClinicProfileFromJSON,
    ServicesVetClinicProfileToJSON,
    ServicesVetClinicRegistrationFromJSON,
    ServicesVetClinicRegistrationToJSON,
    ServicesVetClinicUpdateFromJSON,
    ServicesVetClinicUpdateToJSON,
} from '../models/index';

export interface VetClinicsIdDeleteRequest {
    id: number;
}

export interface VetClinicsIdGetRequest {
    id: number;
}

export interface VetClinicsIdPutRequest {
    id: number;
    request: ServicesVetClinicUpdate;
}

export interface VetClinicsLocationLocationIdGetRequest {
    locationId: number;
}

export interface VetClinicsRegisterPostRequest {
    request: ServicesVetClinicRegistration;
}

/**
 * 
 */
export class VetClinicsApi extends runtime.BaseAPI {

    /**
     * Удаляет клинику из системы (soft delete)
     * Удаление клиники по ID
     */
    async vetClinicsIdDeleteRaw(requestParameters: VetClinicsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling vetClinicsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/vet-clinics/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет клинику из системы (soft delete)
     * Удаление клиники по ID
     */
    async vetClinicsIdDelete(requestParameters: VetClinicsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.vetClinicsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает полный профиль ветеринарной клиники
     * Получение профиля клиники по ID
     */
    async vetClinicsIdGetRaw(requestParameters: VetClinicsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicesVetClinicProfile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling vetClinicsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/vet-clinics/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesVetClinicProfileFromJSON(jsonValue));
    }

    /**
     * Возвращает полный профиль ветеринарной клиники
     * Получение профиля клиники по ID
     */
    async vetClinicsIdGet(requestParameters: VetClinicsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicesVetClinicProfile> {
        const response = await this.vetClinicsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет информацию о ветеринарной клинике
     * Обновление профиля клиники
     */
    async vetClinicsIdPutRaw(requestParameters: VetClinicsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling vetClinicsIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling vetClinicsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/vet-clinics/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesVetClinicUpdateToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Обновляет информацию о ветеринарной клинике
     * Обновление профиля клиники
     */
    async vetClinicsIdPut(requestParameters: VetClinicsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.vetClinicsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список всех ветеринарных клиник в указанной локации
     * Получение всех клиник по ID локации
     */
    async vetClinicsLocationLocationIdGetRaw(requestParameters: VetClinicsLocationLocationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsVetClinic>>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling vetClinicsLocationLocationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/vet-clinics/location/{location_id}`;
        urlPath = urlPath.replace(`{${"location_id"}}`, encodeURIComponent(String(requestParameters['locationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsVetClinicFromJSON));
    }

    /**
     * Возвращает список всех ветеринарных клиник в указанной локации
     * Получение всех клиник по ID локации
     */
    async vetClinicsLocationLocationIdGet(requestParameters: VetClinicsLocationLocationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsVetClinic>> {
        const response = await this.vetClinicsLocationLocationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Регистрирует новую ветеринарную клинику в системе
     * Регистрация новой ветеринарной клиники
     */
    async vetClinicsRegisterPostRaw(requestParameters: VetClinicsRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsVetClinic>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling vetClinicsRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/vet-clinics/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesVetClinicRegistrationToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsVetClinicFromJSON(jsonValue));
    }

    /**
     * Регистрирует новую ветеринарную клинику в системе
     * Регистрация новой ветеринарной клиники
     */
    async vetClinicsRegisterPost(requestParameters: VetClinicsRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsVetClinic> {
        const response = await this.vetClinicsRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
