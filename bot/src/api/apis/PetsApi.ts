/* tslint:disable */
/* eslint-disable */
/**
 * однойкрови.рф
 * API сервиса однойкрови.рф для донороcства крови и помощи животным
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  HandlersSuccessResponse,
  ModelsPet,
  ServicesPetCreate,
  ServicesPetUpdate,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersSuccessResponseFromJSON,
    HandlersSuccessResponseToJSON,
    ModelsPetFromJSON,
    ModelsPetToJSON,
    ServicesPetCreateFromJSON,
    ServicesPetCreateToJSON,
    ServicesPetUpdateFromJSON,
    ServicesPetUpdateToJSON,
} from '../models/index';

export interface PetsIdDeleteRequest {
    id: number;
}

export interface PetsIdGetRequest {
    id: number;
}

export interface PetsIdPutRequest {
    id: number;
    request: ServicesPetUpdate;
}

export interface PetsUserUserIdGetRequest {
    userId: number;
}

export interface PetsUserUserIdPostRequest {
    userId: number;
    request: ServicesPetCreate;
}

/**
 * 
 */
export class PetsApi extends runtime.BaseAPI {

    /**
     * Удаляет питомца из системы
     * Удаление питомца по ID
     */
    async petsIdDeleteRaw(requestParameters: PetsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling petsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/pets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет питомца из системы
     * Удаление питомца по ID
     */
    async petsIdDelete(requestParameters: PetsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.petsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о питомце по его идентификатору
     * Получение питомца по ID
     */
    async petsIdGetRaw(requestParameters: PetsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsPet>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling petsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/pets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsPetFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о питомце по его идентификатору
     * Получение питомца по ID
     */
    async petsIdGet(requestParameters: PetsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsPet> {
        const response = await this.petsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет информацию о питомце
     * Обновление данных питомца
     */
    async petsIdPutRaw(requestParameters: PetsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling petsIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling petsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/pets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesPetUpdateToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Обновляет информацию о питомце
     * Обновление данных питомца
     */
    async petsIdPut(requestParameters: PetsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.petsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает всех питомцев конкретного пользователя
     * Получение питомцев пользователя
     */
    async petsUserUserIdGetRaw(requestParameters: PetsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsPet>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling petsUserUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/pets/user/{user_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsPetFromJSON));
    }

    /**
     * Возвращает всех питомцев конкретного пользователя
     * Получение питомцев пользователя
     */
    async petsUserUserIdGet(requestParameters: PetsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsPet>> {
        const response = await this.petsUserUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создает нового питомца для пользователя
     * Создание нового питомца
     */
    async petsUserUserIdPostRaw(requestParameters: PetsUserUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsPet>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling petsUserUserIdPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling petsUserUserIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/pets/user/{user_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesPetCreateToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsPetFromJSON(jsonValue));
    }

    /**
     * Создает нового питомца для пользователя
     * Создание нового питомца
     */
    async petsUserUserIdPost(requestParameters: PetsUserUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsPet> {
        const response = await this.petsUserUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
