/* tslint:disable */
/* eslint-disable */
/**
 * однойкрови.рф
 * API сервиса однойкрови.рф для донороcства крови и помощи животным
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  HandlersSuccessResponse,
  ModelsBloodStock,
  ServicesBloodStockCreate,
  ServicesBloodStockUpdate,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersSuccessResponseFromJSON,
    HandlersSuccessResponseToJSON,
    ModelsBloodStockFromJSON,
    ModelsBloodStockToJSON,
    ServicesBloodStockCreateFromJSON,
    ServicesBloodStockCreateToJSON,
    ServicesBloodStockUpdateFromJSON,
    ServicesBloodStockUpdateToJSON,
} from '../models/index';

export interface BloodStocksBloodTypeBloodTypeIdGetRequest {
    bloodTypeId: number;
}

export interface BloodStocksClinicClinicIdGetRequest {
    clinicId: number;
}

export interface BloodStocksIdDeleteRequest {
    id: number;
}

export interface BloodStocksIdGetRequest {
    id: number;
}

export interface BloodStocksIdPutRequest {
    id: number;
    request: ServicesBloodStockUpdate;
}

export interface BloodStocksPostRequest {
    request: ServicesBloodStockCreate;
}

export interface BloodStocksSearchGetRequest {
    clinicId?: number;
    petType?: string;
    bloodTypeId?: number;
    status?: string;
    minVolume?: number;
    maxVolume?: number;
    minPrice?: number;
    maxPrice?: number;
}

/**
 * 
 */
export class BloodStocksApi extends runtime.BaseAPI {

    /**
     * Возвращает все запасы крови для конкретного типа крови
     * Получение запасов крови по типу крови
     */
    async bloodStocksBloodTypeBloodTypeIdGetRaw(requestParameters: BloodStocksBloodTypeBloodTypeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsBloodStock>>> {
        if (requestParameters['bloodTypeId'] == null) {
            throw new runtime.RequiredError(
                'bloodTypeId',
                'Required parameter "bloodTypeId" was null or undefined when calling bloodStocksBloodTypeBloodTypeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blood-stocks/blood-type/{blood_type_id}`;
        urlPath = urlPath.replace(`{${"blood_type_id"}}`, encodeURIComponent(String(requestParameters['bloodTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsBloodStockFromJSON));
    }

    /**
     * Возвращает все запасы крови для конкретного типа крови
     * Получение запасов крови по типу крови
     */
    async bloodStocksBloodTypeBloodTypeIdGet(requestParameters: BloodStocksBloodTypeBloodTypeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsBloodStock>> {
        const response = await this.bloodStocksBloodTypeBloodTypeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все запасы крови для конкретной клиники
     * Получение запасов крови клиники
     */
    async bloodStocksClinicClinicIdGetRaw(requestParameters: BloodStocksClinicClinicIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsBloodStock>>> {
        if (requestParameters['clinicId'] == null) {
            throw new runtime.RequiredError(
                'clinicId',
                'Required parameter "clinicId" was null or undefined when calling bloodStocksClinicClinicIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blood-stocks/clinic/{clinic_id}`;
        urlPath = urlPath.replace(`{${"clinic_id"}}`, encodeURIComponent(String(requestParameters['clinicId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsBloodStockFromJSON));
    }

    /**
     * Возвращает все запасы крови для конкретной клиники
     * Получение запасов крови клиники
     */
    async bloodStocksClinicClinicIdGet(requestParameters: BloodStocksClinicClinicIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsBloodStock>> {
        const response = await this.bloodStocksClinicClinicIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список всех запасов крови в системе
     * Получение всех запасов крови
     */
    async bloodStocksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsBloodStock>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blood-stocks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsBloodStockFromJSON));
    }

    /**
     * Возвращает список всех запасов крови в системе
     * Получение всех запасов крови
     */
    async bloodStocksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsBloodStock>> {
        const response = await this.bloodStocksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Удаляет запас крови из системы
     * Удаление запаса крови
     */
    async bloodStocksIdDeleteRaw(requestParameters: BloodStocksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bloodStocksIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blood-stocks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет запас крови из системы
     * Удаление запаса крови
     */
    async bloodStocksIdDelete(requestParameters: BloodStocksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.bloodStocksIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о конкретном запасе крови
     * Получение запаса крови по ID
     */
    async bloodStocksIdGetRaw(requestParameters: BloodStocksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsBloodStock>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bloodStocksIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blood-stocks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsBloodStockFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о конкретном запасе крови
     * Получение запаса крови по ID
     */
    async bloodStocksIdGet(requestParameters: BloodStocksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsBloodStock> {
        const response = await this.bloodStocksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет информацию о запасе крови
     * Обновление запаса крови
     */
    async bloodStocksIdPutRaw(requestParameters: BloodStocksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bloodStocksIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling bloodStocksIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/blood-stocks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesBloodStockUpdateToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Обновляет информацию о запасе крови
     * Обновление запаса крови
     */
    async bloodStocksIdPut(requestParameters: BloodStocksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersSuccessResponse> {
        const response = await this.bloodStocksIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создает новый запас крови в системе
     * Создание нового запаса крови
     */
    async bloodStocksPostRaw(requestParameters: BloodStocksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsBloodStock>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling bloodStocksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/blood-stocks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesBloodStockCreateToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsBloodStockFromJSON(jsonValue));
    }

    /**
     * Создает новый запас крови в системе
     * Создание нового запаса крови
     */
    async bloodStocksPost(requestParameters: BloodStocksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsBloodStock> {
        const response = await this.bloodStocksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Выполняет поиск запасов крови по различным параметрам (клиника, тип животного, тип крови, статус, объем, цена)
     * Поиск запасов крови с фильтрами
     */
    async bloodStocksSearchGetRaw(requestParameters: BloodStocksSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsBloodStock>>> {
        const queryParameters: any = {};

        if (requestParameters['clinicId'] != null) {
            queryParameters['clinic_id'] = requestParameters['clinicId'];
        }

        if (requestParameters['petType'] != null) {
            queryParameters['pet_type'] = requestParameters['petType'];
        }

        if (requestParameters['bloodTypeId'] != null) {
            queryParameters['blood_type_id'] = requestParameters['bloodTypeId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['minVolume'] != null) {
            queryParameters['min_volume'] = requestParameters['minVolume'];
        }

        if (requestParameters['maxVolume'] != null) {
            queryParameters['max_volume'] = requestParameters['maxVolume'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['min_price'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['max_price'] = requestParameters['maxPrice'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/blood-stocks/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsBloodStockFromJSON));
    }

    /**
     * Выполняет поиск запасов крови по различным параметрам (клиника, тип животного, тип крови, статус, объем, цена)
     * Поиск запасов крови с фильтрами
     */
    async bloodStocksSearchGet(requestParameters: BloodStocksSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsBloodStock>> {
        const response = await this.bloodStocksSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
